package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
)

func (r *queryResolver) ListOrders(ctx context.Context) ([]*Order, error) {
	orders, err := r.OrderService.GetOrders()
	if err != nil {
		return nil, err
	}

	var gqlOrders []*Order
	for _, o := range orders {
		med := o.Medication
		dos := o.Dosage
		created := o.CreatedAt.Format("2006-01-02T15:04:05Z07:00")
		updated := o.UpdatedAt.Format("2006-01-02T15:04:05Z07:00")

		gqlOrders = append(gqlOrders, &Order{
			ID:         fmt.Sprintf("%d", o.ID),
			Item:       o.Item,
			Amount:     int32(o.Amount),
			PatientID:  int32(o.PatientID),
			Medication: &med,
			Dosage:     &dos,
			Status:     o.Status,
			CreatedAt:  &created,
			UpdatedAt:  &updated,
		})
	}
	return gqlOrders, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
